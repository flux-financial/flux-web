#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var express = require('express');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.FLUX_PORT || '3000');
app.set('port', port);

// get host from environment
var host = process.env.HOST || '0.0.0.0';
app.set('host', host);

/**
 * Create HTTP server.
 */

// check if HTTPS required in environment
if (process.env.FLUX_PRODUCTION == "true") {
  // get SSL cert
  var sslPath = '/etc/letsencrypt/live/fluxfinancial.net/';
  var serverOptions = {
    key: fs.readFileSync(sslPath + 'privkey.pem'),
    cert: fs.readFileSync(sslPath + 'fullchain.pem')
  };

  // create https server
  var server = https.createServer(serverOptions, app);

  // create HTTP server that redirects to HTTPS
  var redirectServer = express();

  redirectServer.get('*', function(req, res, next) {
    if (req.protocol === "http") {
      res.redirect('https://' + req.headers.host + req.url);
    } else {
      next();
    }
  });

  redirectServer.listen(80, host);

} else {
  // if not in production, use HTTP only
  var server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
